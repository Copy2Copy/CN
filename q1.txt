//selective repeat
import socket

def client_program():
	n = 4
    	win_start = 0
	win_end = win_start + n - 1
	host = socket.gethostname()  # as both code is running on same pc
	port = 12344  # socket server port number
	sender = []
	flag = 0 #send whole sender list else 1 means send only win_start frame
	client_socket = socket.socket()  # instantiate
	client_socket.connect((host, port))  # connect to the server
	print 'Window Size is ', n
	print '******** Enter "bye" to close connection ***************'
        message = raw_input("Hit any key to start sending frames -> ")  # take input
        while message.lower().strip() != 'bye':
		print "Sending frames..."
		if (flag == 0):
			for i in range(n):
				sender.append(win_start + i)
			for i in sender :
				print "Frame -> ", i
		else:
			print "Frame -> ", win_start
		msg = str(win_start)
        	client_socket.send(msg.encode())  # send message
        	data = client_socket.recv(1024).decode()  # receive NAK
		msg = str(data)
		ack = int(msg)
		if ack not in sender:
			win_start = ack
			win_end = win_start + n - 1
			flag = 0         		#send new frame
			for i in range(n):
				sender.pop()
		else:
			win_start = int(msg)
			flag = 1			#send old frame
			
		print "************************************"
        	print 'Received ACK server: ' + data  # show in terminal
		
        	message = raw_input("Hit any key to start sending frames -> ")  # again take input

    	client_socket.close()  # close the connection


if __name__ == '__main__':
    client_program()


######################### OUTPUT : Client Side #################################

Window Size is  4
******** Enter "bye" to close connection ***************
Hit any key to start sending frames -> 
Sending frames...
Frame ->  0
Frame ->  1
Frame ->  2
Frame ->  3
************************************
Received ACK server: 4
Hit any key to start sending frames -> 
Sending frames...
Frame ->  4
Frame ->  5
Frame ->  6
Frame ->  7
************************************
Received ACK server: 4
Hit any key to start sending frames -> 
Sending frames...
Frame ->  4
************************************
Received ACK server: 7
Hit any key to start sending frames -> 
Sending frames...
Frame ->  7
************************************
Received ACK server: 8
Hit any key to start sending frames -> 
Sending frames...
Frame ->  8
Frame ->  9
Frame ->  10
Frame ->  11
************************************
Received ACK server: 12
Hit any key to start sending frames -> bye


import socket
import random
def server_program():
    # get the hostname
    host = socket.gethostname()
    port = 12344  # initiate port no above 1024
    exp = 0
    n = 4
    new = 1
    win_start = 0
    win_end   = win_start + n - 1
    receiver = []
    server_socket = socket.socket()  # get instance
    # look closely. The bind() function takes tuple as argument
    server_socket.bind((host, port))  # bind host address and port together

    # configure how many client the server can listen simultaneously
    server_socket.listen(2)
    conn, address = server_socket.accept()  # accept new connection
    print "Connection from: ", str(address)
    while True:
        # receive data stream. it won't accept data packet greater than 1024 bytes
        data = conn.recv(1024).decode()
        if not data:
            # if data is not received break
            break
	rec = int(data)
	lim = rec + n - 1
	count = 0
	flag = 0
	ack = rec
	
	
	randy = random.randint(1, 4)
	if new == 1 : 			#you received a new frame of a new window
		while(count != randy):
			temp = random.randint(rec, lim)
			
			if temp not in receiver:
				print "Received Frame -> ", temp
				count+=1
				flag = 1       #Atleast one new frame added in receiver buffer
				receiver.append(temp)
	else :
		print "Received Frame -> ", rec       #you received a new frame of an old window  
		receiver.append(rec)
		flag = 1
        if(flag == 1):
		for i in range(rec,lim+1):
			if i not in receiver:
				ack = i
				break
			ack = i+1
	
	print "Sending ACK    -> ", ack #next expected frame
        print '***************************************************'
	data = str(ack)
        conn.send(data.encode())  # send data to the client

	if ack > win_end :
		win_start = ack
		win_end   = win_start + n - 1
		new = 1			# now receive a new frame of a new window
	else :
		new = 0 		# now received a new frame of an old window

    conn.close()  # close the connection


if __name__ == '__main__':
    server_program()

############################# OUTPUT : Server Side ##########################
Connection from:  ('127.0.0.1', 40912)
Received Frame ->  0
Received Frame ->  3
Received Frame ->  2
Received Frame ->  1
Sending ACK    ->  4
***************************************************
Received Frame ->  6
Received Frame ->  5
Sending ACK    ->  4
***************************************************
Received Frame ->  4
Sending ACK    ->  7
***************************************************
Received Frame ->  7
Sending ACK    ->  8
***************************************************
Received Frame ->  9
Received Frame ->  11
Received Frame ->  8
Received Frame ->  10
Sending ACK    ->  12
***************************************************
sayali@sayali:~/Desktop/Saiy/MyDocs/CN $ '''
Footer
Â© 2023 GitH
